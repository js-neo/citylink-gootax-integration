// src/modules/telegram/bot-core.ts
import { Telegraf, Markup } from 'telegraf';
import { VoiceProcessor } from './voice-processor.js';
import { logger } from '../../utils/logger.js';
import { OrderProcessor } from '../../services/order-processor.js';
import { getRedisClient } from '../../config/redis.js';
import { processTelegramOrder } from './message-parser/index.js';
import type { ParsedOrder } from './voice-processor.js';

export class TelegramBot {
    private readonly bot: Telegraf;
    private readonly voiceProcessor: VoiceProcessor;
    private readonly orderProcessor: OrderProcessor;
    private readonly redis = getRedisClient();

    constructor() {
        if (!process.env.TG_TOKEN) {
            throw new Error('–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        this.bot = new Telegraf(process.env.TG_TOKEN);
        this.voiceProcessor = new VoiceProcessor();
        this.orderProcessor = OrderProcessor.getInstance();
        this.setupHandlers();
    }

    private setupHandlers(): void {
        this.bot.use(async (ctx, next) => {
            if (!ctx.message) return next();

            if ('voice' in ctx.message) {
                try {
                    const chatId = ctx.message.chat.id;

                    const lastRequest = await this.redis.get(`tg_rate_limit:${chatId}`);
                    if (lastRequest && Date.now() - parseInt(lastRequest) < 5000) {
                        await ctx.reply('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
                        return;
                    }

                    await this.redis.set(`tg_rate_limit:${chatId}`, Date.now().toString(), 'EX', 5);
                    await ctx.sendChatAction('typing');
                    const message = await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');

                    const fileId = ctx.message.voice.file_id;
                    const parsedOrder = await this.voiceProcessor.processVoiceMessage(fileId);
                    const orderText = JSON.stringify(parsedOrder);

                    await this.redis.set(
                        `tg_voice:${ctx.message.message_id}`,
                        orderText,
                        'EX',
                        86400
                    );

                    await ctx.telegram.editMessageText(
                        chatId,
                        message.message_id,
                        undefined,
                        `üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"${parsedOrder.text}"\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_${ctx.message.message_id}` },
                                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${ctx.message.message_id}` }
                                    ]
                                ]
                            }
                        }
                    );
                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                return;
            }

            if ('text' in ctx.message) {
                if (ctx.message.text.includes('üé§')) {
                    await ctx.reply('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞');
                    return;
                }

                try {
                    await ctx.sendChatAction('typing');
                    const orderData = await processTelegramOrder(ctx.message.text);
                    await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ #${orderData.order_id} —Å–æ–∑–¥–∞–Ω!`);
                } catch (error) {
                    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /help`);
                }
                return;
            }

            return next();
        });

        this.bot.action(/^confirm_(\d+)$/, async (ctx) => {
            const messageId = ctx.match[1];
            const orderText = await this.redis.get(`tg_voice:${messageId}`);

            if (!orderText) {
                await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ');
                return;
            }

            try {
                const parsedOrder: ParsedOrder = JSON.parse(orderText);
                if (ctx.update.callback_query.message) {
                    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                }
                await ctx.answerCbQuery('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–∫–∞–∑...');

                const orderData = await this.orderProcessor.processOrder({
                    rawAddresses: [parsedOrder.pickup, parsedOrder.dropoff],
                    client_id: `tg-${messageId}-${Date.now()}`,
                    phone: parsedOrder.phone,
                    vehicleType: parsedOrder.vehicleType,
                    time: parsedOrder.time,
                    options: [],
                    source: 'telegram'
                });

                await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ #${orderData.order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
                await ctx.reply('–ß—Ç–æ –¥–∞–ª—å—à–µ?', Markup.keyboard([
                    ['üöó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º'],
                    ['üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
                ]).resize());
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.`);
            }
        });

        this.bot.command('start', async (ctx) => {
            await ctx.reply(
                `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤!\n\n` +
                `<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n` +
                `1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏\n` +
                `2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n` +
                `3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n` +
                `–ü—Ä–∏–º–µ—Ä: "–ó–∞–∫–∞–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É –ö–æ—Å–º–æ—Å, –º–∏–Ω–∏–≤—ç–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω 89161234567"`,
                {
                    parse_mode: 'HTML',
                    ...Markup.keyboard([
                        ['üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–∫–∞–∑'],
                        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
                    ]).resize()
                }
            );
        });

        this.bot.catch((error) => {
            logger.error('Bot error:', error);
        });
    }

    public start(): void {
        const launchConfig = process.env.NODE_ENV === 'production' ? {
            webhook: {
                domain: process.env.WEBHOOK_DOMAIN!,
                port: parseInt(process.env.PORT || '3000'),
                hookPath: '/telegram-webhook'
            }
        } : {};

        this.bot.launch(launchConfig).then(() => {
            logger.info(process.env.NODE_ENV === 'production'
                ? `–ë–æ—Ç webhook –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${process.env.WEBHOOK_DOMAIN}`
                : '–ó–∞–ø—É—â–µ–Ω –±–æ—Ç-–æ–ø—Ä–æ—Å');
        });
    }
}